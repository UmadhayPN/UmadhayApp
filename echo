import numpy as np
from scipy.signal import lfilter
import pyaudio
import wave

# Simple FIR filter for echo cancellation
def echo_cancel(mic_input, ref_signal, filter_len=1024):
    """ Basic adaptive echo cancellation (NLMS algorithm simplified) """
    echo_estimate = np.zeros(len(mic_input))
    h = np.zeros(filter_len)
    mu = 0.1  # step size

    for i in range(filter_len, len(mic_input)):
        x = ref_signal[i - filter_len:i]
        y = np.dot(h, x)
        e = mic_input[i] - y
        echo_estimate[i] = e
        h = h + mu * e * x / (np.dot(x, x) + 1e-6)  # update filter

    return echo_estimate

# Load recorded mic input and reference (playback) signal
def load_wav(filename):
    with wave.open(filename, 'rb') as wf:
        return np.frombuffer(wf.readframes(wf.getnframes()), dtype=np.int16)

mic_input = load_wav('mic_input.wav')       # Recorded mic (contains echo)
reference = load_wav('playback_reference.wav')  # Reference playback signal

# Ensure equal length
min_len = min(len(mic_input), len(reference))
mic_input = mic_input[:min_len]
reference = reference[:min_len]

# Perform echo cancellation
cleaned = echo_cancel(mic_input, reference)

# Save the result
def save_wav(filename, data, framerate=16000):
    with wave.open(filename, 'wb') as wf:
        wf.setnchannels(1)
        wf.setsampwidth(2)
        wf.setframerate(framerate)
        wf.writeframes(data.astype(np.int16).tobytes())

save_wav('cleaned_output.wav', cleaned)
